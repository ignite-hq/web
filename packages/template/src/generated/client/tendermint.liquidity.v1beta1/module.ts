// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject } from "@cosmjs/proto-signing";

import { Api } from "./rest";
import { MsgDepositWithinBatch } from "./types/tendermint/liquidity/v1beta1/tx";
import { MsgWithdrawWithinBatch } from "./types/tendermint/liquidity/v1beta1/tx";
import { MsgSwapWithinBatch } from "./types/tendermint/liquidity/v1beta1/tx";
import { MsgCreatePool } from "./types/tendermint/liquidity/v1beta1/tx";



type sendMsgDepositWithinBatchParams = {
  value: MsgDepositWithinBatch,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawWithinBatchParams = {
  value: MsgWithdrawWithinBatch,
  fee?: StdFee,
  memo?: string
};

type sendMsgSwapWithinBatchParams = {
  value: MsgSwapWithinBatch,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePoolParams = {
  value: MsgCreatePool,
  fee?: StdFee,
  memo?: string
};


type msgDepositWithinBatchParams = {
  value: MsgDepositWithinBatch,
};

type msgWithdrawWithinBatchParams = {
  value: MsgWithdrawWithinBatch,
};

type msgSwapWithinBatchParams = {
  value: MsgSwapWithinBatch,
};

type msgCreatePoolParams = {
  value: MsgCreatePool,
};


class Module extends Api<any> {
	private _client: SigningStargateClient;
	private _addr: string;

  	constructor(baseUrl: string) {
		super({
			baseUrl
		})
	}

	public withSigner(client: SigningStargateClient, _addr: string) {
		this._client = client;
		this._addr = _addr;
	}

	public noSigner() {
		this._client = undefined;
		this._addr = undefined;
	}

	
	async sendMsgDepositWithinBatch({ value, fee, memo }: sendMsgDepositWithinBatchParams): Promise<DeliverTxResponse> {
		if (!this._client) {
		    throw new Error('TxClient:sendMsgDepositWithinBatch: Unable to sign Tx. Signer is not present.')
		}
		if (!this._addr) {
            throw new Error('TxClient:sendMsgDepositWithinBatch: Unable to sign Tx. Address is not present.')
        }
		try {
			let msg = this.msgDepositWithinBatch({ value: MsgDepositWithinBatch.fromPartial(value) })
			return await this._client.signAndBroadcast(this._addr, [msg], fee ? fee : { amount: [], gas: '200000' }, memo)
		} catch (e: any) {
			throw new Error('TxClient:sendMsgDepositWithinBatch: Could not broadcast Tx: '+ e.message)
		}
	}
	
	async sendMsgWithdrawWithinBatch({ value, fee, memo }: sendMsgWithdrawWithinBatchParams): Promise<DeliverTxResponse> {
		if (!this._client) {
		    throw new Error('TxClient:sendMsgWithdrawWithinBatch: Unable to sign Tx. Signer is not present.')
		}
		if (!this._addr) {
            throw new Error('TxClient:sendMsgWithdrawWithinBatch: Unable to sign Tx. Address is not present.')
        }
		try {
			let msg = this.msgWithdrawWithinBatch({ value: MsgWithdrawWithinBatch.fromPartial(value) })
			return await this._client.signAndBroadcast(this._addr, [msg], fee ? fee : { amount: [], gas: '200000' }, memo)
		} catch (e: any) {
			throw new Error('TxClient:sendMsgWithdrawWithinBatch: Could not broadcast Tx: '+ e.message)
		}
	}
	
	async sendMsgSwapWithinBatch({ value, fee, memo }: sendMsgSwapWithinBatchParams): Promise<DeliverTxResponse> {
		if (!this._client) {
		    throw new Error('TxClient:sendMsgSwapWithinBatch: Unable to sign Tx. Signer is not present.')
		}
		if (!this._addr) {
            throw new Error('TxClient:sendMsgSwapWithinBatch: Unable to sign Tx. Address is not present.')
        }
		try {
			let msg = this.msgSwapWithinBatch({ value: MsgSwapWithinBatch.fromPartial(value) })
			return await this._client.signAndBroadcast(this._addr, [msg], fee ? fee : { amount: [], gas: '200000' }, memo)
		} catch (e: any) {
			throw new Error('TxClient:sendMsgSwapWithinBatch: Could not broadcast Tx: '+ e.message)
		}
	}
	
	async sendMsgCreatePool({ value, fee, memo }: sendMsgCreatePoolParams): Promise<DeliverTxResponse> {
		if (!this._client) {
		    throw new Error('TxClient:sendMsgCreatePool: Unable to sign Tx. Signer is not present.')
		}
		if (!this._addr) {
            throw new Error('TxClient:sendMsgCreatePool: Unable to sign Tx. Address is not present.')
        }
		try {
			let msg = this.msgCreatePool({ value: MsgCreatePool.fromPartial(value) })
			return await this._client.signAndBroadcast(this._addr, [msg], fee ? fee : { amount: [], gas: '200000' }, memo)
		} catch (e: any) {
			throw new Error('TxClient:sendMsgCreatePool: Could not broadcast Tx: '+ e.message)
		}
	}
	
	
	msgDepositWithinBatch({ value }: msgDepositWithinBatchParams): EncodeObject {
		try {
			return { typeUrl: "/tendermint.liquidity.v1beta1.MsgDepositWithinBatch", value: MsgDepositWithinBatch.fromPartial( value ) }  
		} catch (e: any) {
			throw new Error('TxClient:MsgDepositWithinBatch: Could not create message: ' + e.message)
		}
	}
	
	msgWithdrawWithinBatch({ value }: msgWithdrawWithinBatchParams): EncodeObject {
		try {
			return { typeUrl: "/tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch", value: MsgWithdrawWithinBatch.fromPartial( value ) }  
		} catch (e: any) {
			throw new Error('TxClient:MsgWithdrawWithinBatch: Could not create message: ' + e.message)
		}
	}
	
	msgSwapWithinBatch({ value }: msgSwapWithinBatchParams): EncodeObject {
		try {
			return { typeUrl: "/tendermint.liquidity.v1beta1.MsgSwapWithinBatch", value: MsgSwapWithinBatch.fromPartial( value ) }  
		} catch (e: any) {
			throw new Error('TxClient:MsgSwapWithinBatch: Could not create message: ' + e.message)
		}
	}
	
	msgCreatePool({ value }: msgCreatePoolParams): EncodeObject {
		try {
			return { typeUrl: "/tendermint.liquidity.v1beta1.MsgCreatePool", value: MsgCreatePool.fromPartial( value ) }  
		} catch (e: any) {
			throw new Error('TxClient:MsgCreatePool: Could not create message: ' + e.message)
		}
	}
	
};

export default Module;
