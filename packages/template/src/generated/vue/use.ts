// Generated by Ignite ignite.com/cli
import { OfflineDirectSigner } from '@cosmjs/proto-signing'
import { SigningStargateClient } from '@cosmjs/stargate'
import { Gaia, registry } from 'cosmos-gaia-ts-client'
import { toRefs, ToRefs, reactive, UnwrapNestedRefs } from 'vue'

type State = UnwrapNestedRefs<Gaia>

type Response = {
    gaia: ToRefs<Gaia>
    signIn: (offlineSigner: OfflineDirectSigner) => void
    signOut: () => void
    inject: (instance: Gaia) => void
}

let _gaiaGlobal: State

export default function (): Response {
    let signIn = async (offlineSigner: OfflineDirectSigner) => {
        let [acc] = await offlineSigner.getAccounts()

        let stargateClient = await SigningStargateClient.connectWithSigner(
            _gaiaGlobal.env.rpcURL,
            offlineSigner,
            { registry }
        )
        let addr = acc.address

        _gaiaGlobal.signer.client = stargateClient
        _gaiaGlobal.signer.addr = addr

        
        
        _gaiaGlobal.cosmosAuthV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosAuthzV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosBankV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosBaseTendermintV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosCrisisV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosDistributionV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosEvidenceV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosFeegrantV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosGovV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosMintV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosParamsV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosSlashingV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosStakingV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosTxV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosUpgradeV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.cosmosVestingV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.tendermintLiquidityV1Beta1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcApplicationsInterchainAccountsControllerV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcApplicationsInterchainAccountsHostV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcApplicationsTransferV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcCoreChannelV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcCoreClientV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.ibcCoreConnectionV1.withSigner(stargateClient, addr)
        
        _gaiaGlobal.routerV1.withSigner(stargateClient, addr)
        
    }

    let signOut = () => {
        _gaiaGlobal.signer.client = undefined
        _gaiaGlobal.signer.addr = undefined

        
        
        _gaiaGlobal.cosmosAuthV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosAuthzV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosBankV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosBaseTendermintV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosCrisisV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosDistributionV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosEvidenceV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosFeegrantV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosGovV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosMintV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosParamsV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosSlashingV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosStakingV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosTxV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosUpgradeV1Beta1.noSigner()
        
        _gaiaGlobal.cosmosVestingV1Beta1.noSigner()
        
        _gaiaGlobal.tendermintLiquidityV1Beta1.noSigner()
        
        _gaiaGlobal.ibcApplicationsInterchainAccountsControllerV1.noSigner()
        
        _gaiaGlobal.ibcApplicationsInterchainAccountsHostV1.noSigner()
        
        _gaiaGlobal.ibcApplicationsTransferV1.noSigner()
        
        _gaiaGlobal.ibcCoreChannelV1.noSigner()
        
        _gaiaGlobal.ibcCoreClientV1.noSigner()
        
        _gaiaGlobal.ibcCoreConnectionV1.noSigner()
        
        _gaiaGlobal.routerV1.noSigner()
        
    }

    let inject = (instance: Gaia) => {
        _gaiaGlobal = reactive<Gaia>(instance)
    }

    return {
        inject,
        gaia: toRefs(_gaiaGlobal as Gaia),
        signIn,
        signOut
    }
}
