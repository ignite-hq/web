{"version":3,"sources":["../src/SPClient.ts"],"names":["SPClient","apiAddr","rpcAddr","wsAddr","poll","connectivityTest","bind","timer","setInterval","socket","ReconnectingWebSocket","onopen","onOpenWS","onmessage","onMessageWS","onerror","onErrorWS","onclose","onCloseWS","signer","SigningStargateClient","connectWithSigner","signingClient","emit","registry","axios","get","response","console","error","SpClientError","send","JSON","stringify","jsonrpc","method","id","params","msg","result","parse","data","type","url","query","key","value","encodeURIComponent","Array","isArray","join","rawQuery","keys","Object","filter","map","toQueryString","addQueryParam","queryString","body","path","addQueryParams","headers","Accept","EventEmitter"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport axios, { AxiosPromise, AxiosResponse } from 'axios';\nimport { SigningStargateClient } from '@cosmjs/stargate';\nimport { OfflineDirectSigner, Registry } from '@cosmjs/proto-signing';\nimport SpClientError from './errors/SpClientError';\nexport interface IClientConfig {\n  apiAddr: string;\n  rpcAddr?: string;\n  wsAddr?: string;\n}\nexport type QueryParamsType = Record<string | number, any>;\nexport interface IFullRequestParams {\n  body?: unknown;\n  path: string;\n  query?: QueryParamsType;\n  method: 'GET' | 'POST' | 'PUT';\n}\n\nexport default class SPClient extends EventEmitter {\n  private apiAddr: string;\n  private rpcAddr: string;\n  private wsAddr: string;\n\n  private socket: ReconnectingWebSocket;\n\n  public signingClient;\n  private signer: OfflineDirectSigner;\n  private timer: ReturnType<typeof setInterval>;\n\n  constructor({ apiAddr, rpcAddr, wsAddr }: IClientConfig) {\n    super();\n    this.apiAddr = apiAddr;\n    this.rpcAddr = rpcAddr;\n    this.wsAddr = wsAddr;\n    const poll: any = this.connectivityTest.bind(this);\n    this.timer = setInterval(poll, 5000);\n    this.connectivityTest();\n    if (this.wsAddr) {\n      this.socket = new ReconnectingWebSocket(this.wsAddr);\n\n      this.socket.onopen = this.onOpenWS.bind(this);\n      this.socket.onmessage = this.onMessageWS.bind(this);\n      this.socket.onerror = this.onErrorWS.bind(this);\n      this.socket.onclose = this.onCloseWS.bind(this);\n    }\n  }\n  public async useSigner(signer: OfflineDirectSigner): Promise<void> {\n    this.signingClient = await SigningStargateClient.connectWithSigner(\n      this.rpcAddr,\n      signer,\n    );\n    this.signer = signer;\n  }\n  public switchAPI(apiAddr: string): void {\n    this.apiAddr = apiAddr;\n  }\n  public switchWS(wsAddr: string): void {\n    this.emit('ws-status', false);\n    this.wsAddr = wsAddr;\n    this.socket = new ReconnectingWebSocket(this.wsAddr);\n  }\n  public async switchRPC(rpcAddr: string): Promise<void> {\n    this.rpcAddr = rpcAddr;\n    if (this.signingClient) {\n      const registry: Registry = { ...this.signingClient.registry };\n      this.signingClient = await SigningStargateClient.connectWithSigner(\n        this.rpcAddr,\n        this.signer,\n        { registry },\n      );\n    }\n  }\n  private async connectivityTest(): Promise<void> {\n    if (this.apiAddr) {\n      try {\n        await axios.get(this.apiAddr + '/node_info');\n        this.emit('api-status', true);\n      } catch (error) {\n        if (!error.response) {\n          this.emit('api-status', false);\n          console.error(\n            new SpClientError('Client-js:API', 'API Node unavailable'),\n          );\n        } else {\n          this.emit('api-status', true);\n        }\n      }\n    }\n    if (this.rpcAddr) {\n      try {\n        await axios.get(this.rpcAddr);\n        this.emit('rpc-status', true);\n      } catch (error) {\n        if (!error.response) {\n          console.error(\n            new SpClientError('Client-js:API', 'RPC Node unavailable'),\n          );\n          this.emit('rpc-status', false);\n        } else {\n          this.emit('api-status', true);\n        }\n      }\n    }\n  }\n  private onErrorWS(): void {\n    console.error(\n      new SpClientError('Client-js:WS', 'Could not connect to websocket.'),\n    );\n  }\n  private onCloseWS(): void {\n    this.emit('ws-status', false);\n  }\n  private onOpenWS(): void {\n    this.emit('ws-status', true);\n    this.socket.send(\n      JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        id: '1',\n        params: [\"tm.event = 'NewBlock'\"],\n      }),\n    );\n  }\n  private onMessageWS(msg: any): void {\n    const result: any = JSON.parse(msg.data).result;\n    if (result.data && result.data.type === 'tendermint/event/NewBlock') {\n      this.emit('newblock', JSON.parse(msg.data).result);\n    }\n  }\n  public async query(url: string, params = ''): Promise<any> {\n    try {\n      const response: any = await axios.get(this.apiAddr + url + params);\n      return response.data;\n    } catch (e) {\n      console.error(\n        new SpClientError('Client-js:API', 'Could not access API: ' + url),\n      );\n    }\n  }\n\n  private addQueryParam(query: QueryParamsType, key: string): string {\n    const value: any = query[key];\n\n    return (\n      encodeURIComponent(key) +\n      '=' +\n      encodeURIComponent(\n        Array.isArray(value)\n          ? value.join(',')\n          : typeof value === 'number'\n          ? value\n          : `${value}`,\n      )\n    );\n  }\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query: QueryParamsType = rawQuery || {};\n    const keys: string[] = Object.keys(query).filter(\n      (key) => 'undefined' !== typeof query[key],\n    );\n    return keys\n      .map((key) =>\n        typeof query[key] === 'object' && !Array.isArray(query[key])\n          ? this.toQueryString(query[key] as QueryParamsType)\n          : this.addQueryParam(query, key),\n      )\n      .join('&');\n  }\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString: string = this.toQueryString(rawQuery);\n    return queryString ? `?${queryString}` : '';\n  }\n  public async request<T = any>({\n    body,\n    path,\n    query,\n    method,\n  }: IFullRequestParams): Promise<AxiosResponse<T>> {\n    const url: string = this.apiAddr + path + this.addQueryParams(query);\n    try {\n      const response: AxiosPromise<any> = axios({\n        url,\n        method,\n        data: body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n        },\n      });\n      const data: AxiosResponse<any> = await response;\n      return data;\n    } catch (e) {\n      console.error(\n        new SpClientError('Client-js:API', 'Could not access API: ' + url),\n      );\n    }\n  }\n}\n"],"file":"SPClient.js"}