// Generated by Ignite ignite.com/cli
import { Registry } from '@cosmjs/proto-signing'
import {
  Env,
  plugEnv,
  plugKeplr,
  plugSigner,
  plugWebSocket
} from '@ignt/plugins'

import {
  Module as CosmosAuthV1Beta1,
  msgTypes as CosmosAuthV1Beta1MsgTypes
} from './cosmos.auth.v1beta1'
import {
  Module as CosmosAuthzV1Beta1,
  msgTypes as CosmosAuthzV1Beta1MsgTypes
} from './cosmos.authz.v1beta1'
import {
  Module as CosmosBankV1Beta1,
  msgTypes as CosmosBankV1Beta1MsgTypes
} from './cosmos.bank.v1beta1'
import {
  Module as CosmosBaseTendermintV1Beta1,
  msgTypes as CosmosBaseTendermintV1Beta1MsgTypes
} from './cosmos.base.tendermint.v1beta1'
import {
  Module as CosmosCrisisV1Beta1,
  msgTypes as CosmosCrisisV1Beta1MsgTypes
} from './cosmos.crisis.v1beta1'
import {
  Module as CosmosDistributionV1Beta1,
  msgTypes as CosmosDistributionV1Beta1MsgTypes
} from './cosmos.distribution.v1beta1'
import {
  Module as CosmosEvidenceV1Beta1,
  msgTypes as CosmosEvidenceV1Beta1MsgTypes
} from './cosmos.evidence.v1beta1'
import {
  Module as CosmosFeegrantV1Beta1,
  msgTypes as CosmosFeegrantV1Beta1MsgTypes
} from './cosmos.feegrant.v1beta1'
import {
  Module as CosmosGovV1Beta1,
  msgTypes as CosmosGovV1Beta1MsgTypes
} from './cosmos.gov.v1beta1'
import {
  Module as CosmosMintV1Beta1,
  msgTypes as CosmosMintV1Beta1MsgTypes
} from './cosmos.mint.v1beta1'
import {
  Module as CosmosParamsV1Beta1,
  msgTypes as CosmosParamsV1Beta1MsgTypes
} from './cosmos.params.v1beta1'
import {
  Module as CosmosSlashingV1Beta1,
  msgTypes as CosmosSlashingV1Beta1MsgTypes
} from './cosmos.slashing.v1beta1'
import {
  Module as CosmosStakingV1Beta1,
  msgTypes as CosmosStakingV1Beta1MsgTypes
} from './cosmos.staking.v1beta1'
import {
  Module as CosmosTxV1Beta1,
  msgTypes as CosmosTxV1Beta1MsgTypes
} from './cosmos.tx.v1beta1'
import {
  Module as CosmosUpgradeV1Beta1,
  msgTypes as CosmosUpgradeV1Beta1MsgTypes
} from './cosmos.upgrade.v1beta1'
import {
  Module as CosmosVestingV1Beta1,
  msgTypes as CosmosVestingV1Beta1MsgTypes
} from './cosmos.vesting.v1beta1'
import {
  Module as IbcApplicationsInterchainAccountsControllerV1,
  msgTypes as IbcApplicationsInterchainAccountsControllerV1MsgTypes
} from './ibc.applications.interchain_accounts.controller.v1'
import {
  Module as IbcApplicationsInterchainAccountsHostV1,
  msgTypes as IbcApplicationsInterchainAccountsHostV1MsgTypes
} from './ibc.applications.interchain_accounts.host.v1'
import {
  Module as IbcApplicationsTransferV1,
  msgTypes as IbcApplicationsTransferV1MsgTypes
} from './ibc.applications.transfer.v1'
import {
  Module as IbcCoreChannelV1,
  msgTypes as IbcCoreChannelV1MsgTypes
} from './ibc.core.channel.v1'
import {
  Module as IbcCoreClientV1,
  msgTypes as IbcCoreClientV1MsgTypes
} from './ibc.core.client.v1'
import {
  Module as IbcCoreConnectionV1,
  msgTypes as IbcCoreConnectionV1MsgTypes
} from './ibc.core.connection.v1'
import { Module as RouterV1, msgTypes as RouterV1MsgTypes } from './router.v1'
import {
  Module as TendermintLiquidityV1Beta1,
  msgTypes as TendermintLiquidityV1Beta1MsgTypes
} from './tendermint.liquidity.v1beta1'

const registry = new Registry([
  ...CosmosAuthV1Beta1MsgTypes,
  ...CosmosAuthzV1Beta1MsgTypes,
  ...CosmosBankV1Beta1MsgTypes,
  ...CosmosBaseTendermintV1Beta1MsgTypes,
  ...CosmosCrisisV1Beta1MsgTypes,
  ...CosmosDistributionV1Beta1MsgTypes,
  ...CosmosEvidenceV1Beta1MsgTypes,
  ...CosmosFeegrantV1Beta1MsgTypes,
  ...CosmosGovV1Beta1MsgTypes,
  ...CosmosMintV1Beta1MsgTypes,
  ...CosmosParamsV1Beta1MsgTypes,
  ...CosmosSlashingV1Beta1MsgTypes,
  ...CosmosStakingV1Beta1MsgTypes,
  ...CosmosTxV1Beta1MsgTypes,
  ...CosmosUpgradeV1Beta1MsgTypes,
  ...CosmosVestingV1Beta1MsgTypes,
  ...TendermintLiquidityV1Beta1MsgTypes,
  ...IbcApplicationsInterchainAccountsControllerV1MsgTypes,
  ...IbcApplicationsInterchainAccountsHostV1MsgTypes,
  ...IbcApplicationsTransferV1MsgTypes,
  ...IbcCoreChannelV1MsgTypes,
  ...IbcCoreClientV1MsgTypes,
  ...IbcCoreConnectionV1MsgTypes,
  ...RouterV1MsgTypes
])

function plugCosmosAuthV1Beta1(env: Env): {
  cosmosAuthV1Beta1: CosmosAuthV1Beta1
} {
  return {
    cosmosAuthV1Beta1: new CosmosAuthV1Beta1(env.apiURL)
  }
}

function plugCosmosAuthzV1Beta1(env: Env): {
  cosmosAuthzV1Beta1: CosmosAuthzV1Beta1
} {
  return {
    cosmosAuthzV1Beta1: new CosmosAuthzV1Beta1(env.apiURL)
  }
}

function plugCosmosBankV1Beta1(env: Env): {
  cosmosBankV1Beta1: CosmosBankV1Beta1
} {
  return {
    cosmosBankV1Beta1: new CosmosBankV1Beta1(env.apiURL)
  }
}

function plugCosmosBaseTendermintV1Beta1(env: Env): {
  cosmosBaseTendermintV1Beta1: CosmosBaseTendermintV1Beta1
} {
  return {
    cosmosBaseTendermintV1Beta1: new CosmosBaseTendermintV1Beta1(env.apiURL)
  }
}

function plugCosmosCrisisV1Beta1(env: Env): {
  cosmosCrisisV1Beta1: CosmosCrisisV1Beta1
} {
  return {
    cosmosCrisisV1Beta1: new CosmosCrisisV1Beta1(env.apiURL)
  }
}

function plugCosmosDistributionV1Beta1(env: Env): {
  cosmosDistributionV1Beta1: CosmosDistributionV1Beta1
} {
  return {
    cosmosDistributionV1Beta1: new CosmosDistributionV1Beta1(env.apiURL)
  }
}

function plugCosmosEvidenceV1Beta1(env: Env): {
  cosmosEvidenceV1Beta1: CosmosEvidenceV1Beta1
} {
  return {
    cosmosEvidenceV1Beta1: new CosmosEvidenceV1Beta1(env.apiURL)
  }
}

function plugCosmosFeegrantV1Beta1(env: Env): {
  cosmosFeegrantV1Beta1: CosmosFeegrantV1Beta1
} {
  return {
    cosmosFeegrantV1Beta1: new CosmosFeegrantV1Beta1(env.apiURL)
  }
}

function plugCosmosGovV1Beta1(env: Env): {
  cosmosGovV1Beta1: CosmosGovV1Beta1
} {
  return {
    cosmosGovV1Beta1: new CosmosGovV1Beta1(env.apiURL)
  }
}

function plugCosmosMintV1Beta1(env: Env): {
  cosmosMintV1Beta1: CosmosMintV1Beta1
} {
  return {
    cosmosMintV1Beta1: new CosmosMintV1Beta1(env.apiURL)
  }
}

function plugCosmosParamsV1Beta1(env: Env): {
  cosmosParamsV1Beta1: CosmosParamsV1Beta1
} {
  return {
    cosmosParamsV1Beta1: new CosmosParamsV1Beta1(env.apiURL)
  }
}

function plugCosmosSlashingV1Beta1(env: Env): {
  cosmosSlashingV1Beta1: CosmosSlashingV1Beta1
} {
  return {
    cosmosSlashingV1Beta1: new CosmosSlashingV1Beta1(env.apiURL)
  }
}

function plugCosmosStakingV1Beta1(env: Env): {
  cosmosStakingV1Beta1: CosmosStakingV1Beta1
} {
  return {
    cosmosStakingV1Beta1: new CosmosStakingV1Beta1(env.apiURL)
  }
}

function plugCosmosTxV1Beta1(env: Env): {
  cosmosTxV1Beta1: CosmosTxV1Beta1
} {
  return {
    cosmosTxV1Beta1: new CosmosTxV1Beta1(env.apiURL)
  }
}

function plugCosmosUpgradeV1Beta1(env: Env): {
  cosmosUpgradeV1Beta1: CosmosUpgradeV1Beta1
} {
  return {
    cosmosUpgradeV1Beta1: new CosmosUpgradeV1Beta1(env.apiURL)
  }
}

function plugCosmosVestingV1Beta1(env: Env): {
  cosmosVestingV1Beta1: CosmosVestingV1Beta1
} {
  return {
    cosmosVestingV1Beta1: new CosmosVestingV1Beta1(env.apiURL)
  }
}

function plugTendermintLiquidityV1Beta1(env: Env): {
  tendermintLiquidityV1Beta1: TendermintLiquidityV1Beta1
} {
  return {
    tendermintLiquidityV1Beta1: new TendermintLiquidityV1Beta1(env.apiURL)
  }
}

function plugIbcApplicationsInterchainAccountsControllerV1(env: Env): {
  ibcApplicationsInterchainAccountsControllerV1: IbcApplicationsInterchainAccountsControllerV1
} {
  return {
    ibcApplicationsInterchainAccountsControllerV1:
      new IbcApplicationsInterchainAccountsControllerV1(env.apiURL)
  }
}

function plugIbcApplicationsInterchainAccountsHostV1(env: Env): {
  ibcApplicationsInterchainAccountsHostV1: IbcApplicationsInterchainAccountsHostV1
} {
  return {
    ibcApplicationsInterchainAccountsHostV1:
      new IbcApplicationsInterchainAccountsHostV1(env.apiURL)
  }
}

function plugIbcApplicationsTransferV1(env: Env): {
  ibcApplicationsTransferV1: IbcApplicationsTransferV1
} {
  return {
    ibcApplicationsTransferV1: new IbcApplicationsTransferV1(env.apiURL)
  }
}

function plugIbcCoreChannelV1(env: Env): {
  ibcCoreChannelV1: IbcCoreChannelV1
} {
  return {
    ibcCoreChannelV1: new IbcCoreChannelV1(env.apiURL)
  }
}

function plugIbcCoreClientV1(env: Env): {
  ibcCoreClientV1: IbcCoreClientV1
} {
  return {
    ibcCoreClientV1: new IbcCoreClientV1(env.apiURL)
  }
}

function plugIbcCoreConnectionV1(env: Env): {
  ibcCoreConnectionV1: IbcCoreConnectionV1
} {
  return {
    ibcCoreConnectionV1: new IbcCoreConnectionV1(env.apiURL)
  }
}

function plugRouterV1(env: Env): {
  routerV1: RouterV1
} {
  return {
    routerV1: new RouterV1(env.apiURL)
  }
}

type Gaia = ReturnType<typeof plugCosmosAuthV1Beta1> &
  ReturnType<typeof plugCosmosAuthzV1Beta1> &
  ReturnType<typeof plugCosmosBankV1Beta1> &
  ReturnType<typeof plugCosmosBaseTendermintV1Beta1> &
  ReturnType<typeof plugCosmosCrisisV1Beta1> &
  ReturnType<typeof plugCosmosDistributionV1Beta1> &
  ReturnType<typeof plugCosmosEvidenceV1Beta1> &
  ReturnType<typeof plugCosmosFeegrantV1Beta1> &
  ReturnType<typeof plugCosmosGovV1Beta1> &
  ReturnType<typeof plugCosmosMintV1Beta1> &
  ReturnType<typeof plugCosmosParamsV1Beta1> &
  ReturnType<typeof plugCosmosSlashingV1Beta1> &
  ReturnType<typeof plugCosmosStakingV1Beta1> &
  ReturnType<typeof plugCosmosTxV1Beta1> &
  ReturnType<typeof plugCosmosUpgradeV1Beta1> &
  ReturnType<typeof plugCosmosVestingV1Beta1> &
  ReturnType<typeof plugTendermintLiquidityV1Beta1> &
  ReturnType<typeof plugIbcApplicationsInterchainAccountsControllerV1> &
  ReturnType<typeof plugIbcApplicationsInterchainAccountsHostV1> &
  ReturnType<typeof plugIbcApplicationsTransferV1> &
  ReturnType<typeof plugIbcCoreChannelV1> &
  ReturnType<typeof plugIbcCoreClientV1> &
  ReturnType<typeof plugIbcCoreConnectionV1> &
  ReturnType<typeof plugRouterV1> &
  ReturnType<typeof plugSigner> &
  ReturnType<typeof plugKeplr> &
  ReturnType<typeof plugWebSocket> &
  ReturnType<typeof plugEnv>

function createGaia(p: { env: Env }) {
  return _use({
    ...plugCosmosAuthV1Beta1(p.env),

    ...plugCosmosAuthzV1Beta1(p.env),

    ...plugCosmosBankV1Beta1(p.env),

    ...plugCosmosBaseTendermintV1Beta1(p.env),

    ...plugCosmosCrisisV1Beta1(p.env),

    ...plugCosmosDistributionV1Beta1(p.env),

    ...plugCosmosEvidenceV1Beta1(p.env),

    ...plugCosmosFeegrantV1Beta1(p.env),

    ...plugCosmosGovV1Beta1(p.env),

    ...plugCosmosMintV1Beta1(p.env),

    ...plugCosmosParamsV1Beta1(p.env),

    ...plugCosmosSlashingV1Beta1(p.env),

    ...plugCosmosStakingV1Beta1(p.env),

    ...plugCosmosTxV1Beta1(p.env),

    ...plugCosmosUpgradeV1Beta1(p.env),

    ...plugCosmosVestingV1Beta1(p.env),

    ...plugTendermintLiquidityV1Beta1(p.env),

    ...plugIbcApplicationsInterchainAccountsControllerV1(p.env),

    ...plugIbcApplicationsInterchainAccountsHostV1(p.env),

    ...plugIbcApplicationsTransferV1(p.env),

    ...plugIbcCoreChannelV1(p.env),

    ...plugIbcCoreClientV1(p.env),

    ...plugIbcCoreConnectionV1(p.env),

    ...plugRouterV1(p.env),

    ...plugSigner(),

    ...plugKeplr(),

    ...plugWebSocket(p.env),

    ...plugEnv(p.env)
  })
}

function _use<T>(elements: T): { [K in keyof T]: T[K] } {
  return Object.assign({}, elements)
}

export {
  _use,
  createGaia,
  Gaia,
  plugCosmosAuthV1Beta1,
  plugCosmosAuthzV1Beta1,
  plugCosmosBankV1Beta1,
  plugCosmosBaseTendermintV1Beta1,
  plugCosmosCrisisV1Beta1,
  plugCosmosDistributionV1Beta1,
  plugCosmosEvidenceV1Beta1,
  plugCosmosFeegrantV1Beta1,
  plugCosmosGovV1Beta1,
  plugCosmosMintV1Beta1,
  plugCosmosParamsV1Beta1,
  plugCosmosSlashingV1Beta1,
  plugCosmosStakingV1Beta1,
  plugCosmosTxV1Beta1,
  plugCosmosUpgradeV1Beta1,
  plugCosmosVestingV1Beta1,
  plugIbcApplicationsInterchainAccountsControllerV1,
  plugIbcApplicationsInterchainAccountsHostV1,
  plugIbcApplicationsTransferV1,
  plugIbcCoreChannelV1,
  plugIbcCoreClientV1,
  plugIbcCoreConnectionV1,
  plugRouterV1,
  plugTendermintLiquidityV1Beta1,
  registry
}
