{"version":3,"sources":["../../../../src/modules/common/wallet/wallet.js"],"names":["getDecryptor","password","secret","encryptedMnemonic","HDpath","mnemonic","CryptoJS","AES","decrypt","toString","enc","Utf8","DirectSecp256k1HdWallet","fromMnemonic","namespaced","state","wallets","JSON","parse","window","localStorage","getItem","activeWallet","activeClient","selectedAddress","authorized","gasPrice","getters","client","wallet","address","getMnemonic","getPath","accounts","find","x","pathIncrement","relayers","nameAvailable","name","findIndex","lastWallet","loggedIn","signer","walletName","privKey","privkey","mutations","SET_ACTIVE_WALLET","setItem","SET_ACTIVE_CLIENT","ADD_WALLET","push","encrypt","stringify","PATH_INCREMENT","ADD_ACCOUNT","account","SET_RELAYERS","SET_SELECTED_ADDRESS","SET_BACKUP_STATE","backupState","ADD_MESSAGE_TYPE","typeUrl","type","registry","register","SIGN_OUT","actions","signOut","commit","connectWithKeplr","accountSigner","dispatch","rootGetters","root","prefix","getAccounts","console","log","unlockWallet","encryptedWallet","length","getOfflineSigner","updateRelayers","switchAccount","accountIndex","acc","addAccount","parseInt","storeWallets","signInWithPrivateKey","pKey","trim","DirectSecp256k1Wallet","fromKey","firstAccount","restoreWallet","encrypted","newName","incr","createWalletWithMnemonic","sendTransaction","message","memo","denom","fee","amount","gas","add","msg","signAndBroadcast","result"],"mappings":"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","sourcesContent":["import {\n\tDirectSecp256k1HdWallet,\n\tDirectSecp256k1Wallet\n} from '@cosmjs/proto-signing'\n\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate'\nimport { stringToPath } from '@cosmjs/crypto'\nimport CryptoJS from 'crypto-js'\nimport { keyFromWif, keyToWif } from '../../../helpers/keys'\n\n/* START TODO: Integrate closure below for additional security */\nfunction getDecryptor(password) {\n\tlet secret = password\n\treturn async function (encryptedMnemonic, HDpath) {\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t)\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, HDpath)\n\t}\n}\n/* END TODO */\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\twallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\n\t\t\tactiveWallet: null,\n\t\t\tactiveClient: null,\n\t\t\tselectedAddress: '',\n\t\t\tauthorized: false,\n\t\t\tgasPrice: '0.0000025token'\n\t\t}\n\t},\n\tgetters: {\n\t\tclient: (state) => state.activeClient,\n\t\tgasPrice: (state) => state.gasPrice,\n\t\twallet: (state) => state.activeWallet,\n\t\taddress: (state) => state.selectedAddress,\n\t\tgetMnemonic: (state) => state.activeWallet.mnemonic,\n\t\tgetPath: (state) =>\n\t\t\tstate.activeWallet?.HDpath +\n\t\t\tstate.activeWallet?.accounts.find(\n\t\t\t\t(x) => x.address == state.selectedAddress\n\t\t\t).pathIncrement,\n\t\trelayers: (state) => {\n\t\t\treturn (\n\t\t\t\tstate.activeWallet?.accounts.find(\n\t\t\t\t\t(x) => x.address == state.selectedAddress\n\t\t\t\t).relayers ?? []\n\t\t\t)\n\t\t},\n\t\tnameAvailable: (state) => (name) => {\n\t\t\treturn state.wallets.findIndex((x) => x.name == name) == -1\n\t\t},\n\t\tlastWallet: (state) => {\n\t\t\tif (state.activeWallet) {\n\t\t\t\treturn state.activeWallet.name\n\t\t\t} else {\n\t\t\t\treturn window.localStorage.getItem('lastWallet')\n\t\t\t}\n\t\t},\n\t\tloggedIn: (state) => state.activeClient !== null,\n\t\tsigner: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn state.activeClient.signer\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t\twalletName: (state) =>\n\t\t\tstate.activeWallet ? state.activeWallet.name : null,\n\t\tprivKey: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn keyToWif(state.activeClient.signer.privkey)\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\t},\n\tmutations: {\n\t\tSET_ACTIVE_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t},\n\t\tSET_ACTIVE_CLIENT(state, client) {\n\t\t\tstate.activeClient = client\n\t\t\tstate.authorized = true\n\t\t},\n\t\tADD_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: CryptoJS.AES.encrypt(\n\t\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t\t).toString()\n\t\t\t\t})\n\t\t\t}\n\t\t\tif (\n\t\t\t\tstate.activeWallet.name == 'Keplr Integration' &&\n\t\t\t\t!state.activeWallet.password\n\t\t\t) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: JSON.stringify(state.activeWallet)\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tPATH_INCREMENT(state) {\n\t\t\tstate.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1\n\t\t},\n\t\tADD_ACCOUNT(state, account) {\n\t\t\tstate.activeWallet.accounts.push(account)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_RELAYERS(state, relayers) {\n\t\t\tstate.activeWallet.accounts.find(\n\t\t\t\t(x) => x.address == state.selectedAddress\n\t\t\t).relayers = relayers\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_SELECTED_ADDRESS(state, address) {\n\t\t\tstate.selectedAddress = address\n\t\t},\n\t\tSET_BACKUP_STATE(state, backupState) {\n\t\t\tstate.backupState = backupState\n\t\t},\n\t\tADD_MESSAGE_TYPE(state, { typeUrl, type }) {\n\t\t\tstate.activeClient.registry.register(typeUrl, type)\n\t\t},\n\t\tSIGN_OUT(state) {\n\t\t\tstate.selectedAddress = ''\n\t\t\tstate.activeClient = null\n\t\t\tstate.activeWallet = null\n\t\t\tstate.authorized = false\n\t\t}\n\t},\n\tactions: {\n\t\tsignOut({ commit }) {\n\t\t\tcommit('SIGN_OUT')\n\t\t},\n\t\tasync connectWithKeplr({ commit, dispatch, rootGetters }, accountSigner) {\n\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\troot: true\n\t\t\t})\n\n\t\t\tconst wallet = {\n\t\t\t\tname: 'Keplr Integration',\n\t\t\t\tmnemonic: null,\n\t\t\t\tHDpath: null,\n\t\t\t\tpassword: null,\n\t\t\t\tprefix: rootGetters['common/env/addrPrefix'],\n\t\t\t\tpathIncrement: null,\n\t\t\t\taccounts: []\n\t\t\t}\n\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\twallet.accounts.push({ address: account.address, pathIncrement: null })\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync unlockWallet(\n\t\t\t{ commit, state, dispatch, rootGetters },\n\t\t\t{ name, password }\n\t\t) {\n\t\t\tconst encryptedWallet =\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === name)].wallet\n\t\t\tlet wallet\n\t\t\tif (name == 'Keplr Integration') {\n\t\t\t\twallet = JSON.parse(encryptedWallet)\n\t\t\t} else {\n\t\t\t\twallet = JSON.parse(\n\t\t\t\t\tCryptoJS.AES.decrypt(encryptedWallet, password).toString(\n\t\t\t\t\t\tCryptoJS.enc.Utf8\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t\tcommit('SET_ACTIVE_WALLET', wallet)\n\t\t\tif (wallet.accounts.length > 0) {\n\t\t\t\tlet accountSigner\n\t\t\t\tif (wallet.name == 'Keplr Integration') {\n\t\t\t\t\taccountSigner = window.getOfflineSigner(\n\t\t\t\t\t\trootGetters['common/env/chainId']\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\taccountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\t\t\twallet.mnemonic,\n\t\t\t\t\t\tstringToPath(wallet.HDpath + wallet.accounts[0].pathIncrement),\n\t\t\t\t\t\twallet.prefix\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\t\t\troot: true\n\t\t\t\t\t})\n\t\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync updateRelayers({ commit, dispatch }, relayers) {\n\t\t\tcommit('SET_RELAYERS', relayers)\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync switchAccount({ commit, state, rootGetters, dispatch }, address) {\n\t\t\tconst accountIndex = state.activeWallet.accounts.findIndex(\n\t\t\t\t(acc) => acc.address == address\n\t\t\t)\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tstate.activeWallet.mnemonic,\n\t\t\t\tstringToPath(\n\t\t\t\t\tstate.activeWallet.HDpath +\n\t\t\t\t\t\tstate.activeWallet.accounts[accountIndex].pathIncrement\n\t\t\t\t),\n\t\t\t\tstate.activeWallet.prefix\n\t\t\t)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync addAccount({ commit, state, dispatch }, pathIncrement) {\n\t\t\tif (!pathIncrement) {\n\t\t\t\tpathIncrement = state.activeWallet.pathIncrement + 1\n\t\t\t\tcommit('PATH_INCREMENT')\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tstate.activeWallet.mnemonic,\n\t\t\t\tstringToPath(state.activeWallet.HDpath + pathIncrement),\n\t\t\t\tstate.activeWallet.prefix\n\t\t\t)\n\t\t\tconst [acc] = await accountSigner.getAccounts()\n\t\t\tconst account = {\n\t\t\t\taddress: acc.address,\n\t\t\t\tpathIncrement: parseInt(pathIncrement)\n\t\t\t}\n\t\t\tif (\n\t\t\t\tstate.activeWallet.accounts.findIndex(\n\t\t\t\t\t(acc) => acc.address == account.address\n\t\t\t\t) == -1\n\t\t\t) {\n\t\t\t\tcommit('ADD_ACCOUNT', account)\n\t\t\t\tdispatch('storeWallets')\n\t\t\t} else {\n\t\t\t\tthrow 'Account already in store.'\n\t\t\t}\n\t\t},\n\t\tstoreWallets({ commit, state }) {\n\t\t\twindow.localStorage.setItem('wallets', JSON.stringify(state.wallets))\n\t\t\tcommit('SET_BACKUP_STATE', false)\n\t\t},\n\t\tasync signInWithPrivateKey(\n\t\t\t{ commit, rootGetters, dispatch },\n\t\t\t{ prefix = 'cosmos', privKey }\n\t\t) {\n\t\t\tconst pKey = keyFromWif(privKey.trim())\n\t\t\tconst accountSigner = await DirectSecp256k1Wallet.fromKey(pKey, prefix)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync restoreWallet(\n\t\t\t{ commit, dispatch, rootGetters, state },\n\t\t\t{ encrypted, password }\n\t\t) {\n\t\t\tconst wallet = JSON.parse(\n\t\t\t\tCryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8)\n\t\t\t)\n\t\t\tlet newName = wallet.name\n\t\t\tlet incr = 1\n\t\t\twhile (state.wallets.findIndex((x) => x.name == newName) != -1) {\n\t\t\t\tnewName = wallet.name + '_' + incr\n\t\t\t\tincr++\n\t\t\t}\n\t\t\twallet.name = newName\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\twallet.mnemonic,\n\t\t\t\tstringToPath(wallet.HDpath + '0'),\n\t\t\t\twallet.prefix\n\t\t\t)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync createWalletWithMnemonic(\n\t\t\t{ commit, dispatch, rootGetters },\n\t\t\t{\n\t\t\t\tname = null,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath = \"m/44'/118'/0'/0/\",\n\t\t\t\tprefix = 'cosmos',\n\t\t\t\tpassword = null\n\t\t\t}\n\t\t) {\n\t\t\tconst wallet = {\n\t\t\t\tname,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath,\n\t\t\t\tpassword,\n\t\t\t\tprefix,\n\t\t\t\tpathIncrement: 0,\n\t\t\t\taccounts: []\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tmnemonic,\n\t\t\t\tstringToPath(HDpath + '0'),\n\t\t\t\tprefix\n\t\t\t)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tconst account = { address: firstAccount.address, pathIncrement: 0 }\n\t\t\twallet.accounts.push(account)\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync sendTransaction({ state }, { message, memo, denom }) {\n\t\t\tconst fee = {\n\t\t\t\tamount: [{ amount: '0', denom }],\n\t\t\t\tgas: '200000'\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconsole.log({\n\t\t\t\t\tadd: state.selectedAddress,\n\t\t\t\t\tmsg: [message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo\n\t\t\t\t})\n\t\t\t\tconst result = await state.activeClient.signAndBroadcast(\n\t\t\t\t\tstate.selectedAddress,\n\t\t\t\t\t[message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo\n\t\t\t\t)\n\t\t\t\tassertIsBroadcastTxSuccess(result)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow 'Failed to broadcast transaction.' + e\n\t\t\t}\n\t\t}\n\t}\n}\n"],"file":"wallet.js"}