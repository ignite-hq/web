{"version":3,"sources":["../../../../src/modules/common/wallet/wallet.js"],"names":["getDecryptor","password","secret","encryptedMnemonic","HDpath","mnemonic","CryptoJS","AES","decrypt","toString","enc","Utf8","DirectSecp256k1HdWallet","fromMnemonic","namespaced","state","wallets","JSON","parse","window","localStorage","getItem","activeWallet","activeClient","selectedAddress","authorized","gasPrice","getters","client","wallet","address","getMnemonic","getPath","accounts","find","x","pathIncrement","relayers","nameAvailable","name","findIndex","lastWallet","loggedIn","signer","walletName","privKey","privkey","mutations","SET_ACTIVE_WALLET","setItem","SET_ACTIVE_CLIENT","ADD_WALLET","push","encrypt","stringify","PATH_INCREMENT","ADD_ACCOUNT","account","SET_RELAYERS","SET_SELECTED_ADDRESS","SET_BACKUP_STATE","backupState","ADD_MESSAGE_TYPE","typeUrl","type","registry","register","SIGN_OUT","actions","signOut","commit","connectWithKeplr","accountSigner","dispatch","rootGetters","root","getAccounts","unlockWallet","encryptedWallet","length","prefix","console","log","updateRelayers","switchAccount","accountIndex","acc","addAccount","parseInt","storeWallets","signInWithPrivateKey","pKey","trim","DirectSecp256k1Wallet","fromKey","firstAccount","restoreWallet","encrypted","newName","incr","createWalletWithMnemonic","sendTransaction","message","memo","denom","fee","amount","gas","add","msg","signAndBroadcast","result"],"mappings":"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","sourcesContent":["import {\r\n\tDirectSecp256k1HdWallet,\r\n\tDirectSecp256k1Wallet\r\n} from '@cosmjs/proto-signing'\r\n\r\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate'\r\nimport { stringToPath } from '@cosmjs/crypto'\r\nimport CryptoJS from 'crypto-js'\r\nimport { keyFromWif, keyToWif } from '../../../helpers/keys'\r\n\r\n/* START TODO: Integrate closure below for additional security */\r\nfunction getDecryptor(password) {\r\n\tlet secret=password;\r\n\treturn async function(encryptedMnemonic, HDpath) {\r\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\r\n\t\t\tCryptoJS.enc.Utf8\r\n\t\t)\r\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\tmnemonic,\r\n\t\t\tHDpath\r\n\t\t)\r\n\t}\r\n}\r\n/* END TODO */\r\nexport default {\r\n\tnamespaced: true,\r\n\tstate() {\r\n\t\treturn {\r\n\t\t\twallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\r\n\t\t\tactiveWallet: null,\r\n\t\t\tactiveClient: null,\r\n\t\t\tselectedAddress: '',\r\n\t\t\tauthorized: false,\r\n\t\t\tgasPrice: '0.0000025token'\r\n\t\t}\r\n\t},\r\n\tgetters: {\r\n\t\tclient: (state) => state.activeClient,\r\n\t\tgasPrice:(state) => state.gasPrice,\r\n\t\twallet: (state) => state.activeWallet,\r\n\t\taddress: (state) => state.selectedAddress,\r\n\t\tgetMnemonic: (state) => state.activeWallet.mnemonic,\r\n\t\tgetPath: (state) => state.activeWallet?.HDpath+state.activeWallet?.accounts.find(x => x.address==state.selectedAddress).pathIncrement,\r\n\t\trelayers: (state) => {\r\n\t\t\treturn state.activeWallet?.accounts.find( x => x.address==state.selectedAddress).relayers ?? []\r\n\t\t},\r\n\t\tnameAvailable: (state) => (name) => {\r\n\t\t\treturn state.wallets.findIndex((x) => x.name == name) == -1\r\n\t\t},\r\n\t\tlastWallet: (state) => {\r\n\t\t\tif (state.activeWallet) {\r\n\t\t\t\treturn state.activeWallet.name\r\n\t\t\t} else {\r\n\t\t\t\treturn window.localStorage.getItem('lastWallet')\r\n\t\t\t}\r\n\t\t},\r\n\t\tloggedIn: (state) => state.activeClient !== null,\r\n\t\tsigner: (state) => {\r\n\t\t\tif (state.activeClient) {\r\n\t\t\t\treturn state.activeClient.signer\r\n\t\t\t} else {\r\n\t\t\t\treturn null\r\n\t\t\t}\r\n\t\t},\r\n\t\twalletName: (state) =>\r\n\t\t\tstate.activeWallet ? state.activeWallet.name : null,\r\n\t\tprivKey: (state) => {\r\n\t\t\tif (state.activeClient) {\r\n\t\t\t\treturn keyToWif(state.activeClient.signer.privkey)\r\n\t\t\t} else {\r\n\t\t\t\treturn null\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tmutations: {\r\n\t\tSET_ACTIVE_WALLET(state, wallet) {\r\n\t\t\tstate.activeWallet = wallet\r\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\r\n\t\t},\r\n\t\tSET_ACTIVE_CLIENT(state, client) {\r\n\t\t\tstate.activeClient = client\r\n\t\t\tstate.authorized = true\r\n\t\t},\r\n\t\tADD_WALLET(state, wallet) {\r\n\t\t\tstate.activeWallet = wallet\r\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\r\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\r\n\t\t\t\tstate.wallets.push({\r\n\t\t\t\t\tname: state.activeWallet.name,\r\n\t\t\t\t\twallet: CryptoJS.AES.encrypt(\r\n\t\t\t\t\t\tJSON.stringify(state.activeWallet),\r\n\t\t\t\t\t\tstate.activeWallet.password\r\n\t\t\t\t\t).toString()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},\r\n\t\tPATH_INCREMENT(state) {\r\n\t\t\tstate.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1\r\n\t\t},\r\n\t\tADD_ACCOUNT(state, account) {\r\n\t\t\tstate.activeWallet.accounts.push(account)\r\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\r\n\t\t\t\tstate.wallets[\r\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\r\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\r\n\t\t\t\t\tJSON.stringify(state.activeWallet),\r\n\t\t\t\t\tstate.activeWallet.password\r\n\t\t\t\t).toString()\r\n\t\t\t}\r\n\t\t},\r\n\t\tSET_RELAYERS(state,relayers) {\r\n\t\t\tstate.activeWallet.accounts.find( x => x.address==state.selectedAddress).relayers=relayers\r\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\r\n\t\t\t\tstate.wallets[\r\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\r\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\r\n\t\t\t\t\tJSON.stringify(state.activeWallet),\r\n\t\t\t\t\tstate.activeWallet.password\r\n\t\t\t\t).toString()\r\n\t\t\t}\r\n\t\t},\r\n\t\tSET_SELECTED_ADDRESS(state, address) {\r\n\t\t\tstate.selectedAddress = address\r\n\t\t},\r\n\t\tSET_BACKUP_STATE(state, backupState) {\r\n\t\t\tstate.backupState = backupState\r\n\t\t},\r\n\t\tADD_MESSAGE_TYPE(state, { typeUrl, type }) {\r\n\t\t\tstate.activeClient.registry.register(typeUrl, type)\r\n\t\t},\r\n\t\tSIGN_OUT(state) {\r\n\t\t\tstate.selectedAddress = ''\r\n\t\t\tstate.activeClient = null\r\n\t\t\tstate.activeWallet = null\r\n\t\t\tstate.authorized = false\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t\tsignOut({ commit }) {\r\n\t\t\tcommit('SIGN_OUT')\r\n\t\t},\r\n\t\tasync connectWithKeplr({commit,dispatch,rootGetters}, accountSigner) {\r\n\r\n\t\t\tawait dispatch('common/env/signIn', accountSigner, {\r\n\t\t\t\troot: true\r\n\t\t\t})\r\n\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\tconst [account] = await accountSigner.getAccounts()\r\n\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\r\n\t\t},\r\n\t\tasync unlockWallet(\r\n\t\t\t{ commit, state, dispatch, rootGetters },\r\n\t\t\t{ name, password }\r\n\t\t) {\r\n\t\t\tconst encryptedWallet =\r\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === name)].wallet\r\n\t\t\tconst wallet = JSON.parse(\r\n\t\t\t\tCryptoJS.AES.decrypt(encryptedWallet, password).toString(\r\n\t\t\t\t\tCryptoJS.enc.Utf8\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\tcommit('SET_ACTIVE_WALLET', wallet)\r\n\t\t\tif (wallet.accounts.length > 0) {\r\n\t\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\t\t\twallet.mnemonic,\r\n\t\t\t\t\tstringToPath(wallet.HDpath + wallet.accounts[0].pathIncrement),\r\n\t\t\t\t\twallet.prefix\r\n\t\t\t\t)\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait dispatch('common/env/signIn', accountSigner, {\r\n\t\t\t\t\t\troot: true\r\n\t\t\t\t\t})\r\n\t\t\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\t\t\tconst [account] = await accountSigner.getAccounts()\r\n\t\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync updateRelayers({commit, dispatch}, relayers) {\r\n\t\t\tcommit('SET_RELAYERS',relayers)\r\n\t\t\tdispatch('storeWallets')\r\n\t\t},\r\n\t\tasync switchAccount({ commit, state, rootGetters, dispatch }, address) {\r\n\t\t\tconst accountIndex = state.activeWallet.accounts.findIndex(\r\n\t\t\t\t(acc) => acc.address == address\r\n\t\t\t)\r\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\t\tstate.activeWallet.mnemonic,\r\n\t\t\t\tstringToPath(\r\n\t\t\t\t\tstate.activeWallet.HDpath +\r\n\t\t\t\t\t\tstate.activeWallet.accounts[accountIndex].pathIncrement\r\n\t\t\t\t),\r\n\t\t\t\tstate.activeWallet.prefix\r\n\t\t\t)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\r\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\t\tconst [account] = await accountSigner.getAccounts()\r\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync addAccount({ commit, state, dispatch }, pathIncrement) {\r\n\t\t\tif (!pathIncrement) {\r\n\t\t\t\tpathIncrement = state.activeWallet.pathIncrement + 1\r\n\t\t\t\tcommit('PATH_INCREMENT')\r\n\t\t\t}\r\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\t\tstate.activeWallet.mnemonic,\r\n\t\t\t\tstringToPath(state.activeWallet.HDpath + pathIncrement),\r\n\t\t\t\tstate.activeWallet.prefix\r\n\t\t\t)\r\n\t\t\tconst [acc] = await accountSigner.getAccounts()\r\n\t\t\tconst account = {\r\n\t\t\t\taddress: acc.address,\r\n\t\t\t\tpathIncrement: parseInt(pathIncrement)\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\tstate.activeWallet.accounts.findIndex(\r\n\t\t\t\t\t(acc) => acc.address == account.address\r\n\t\t\t\t) == -1\r\n\t\t\t) {\r\n\t\t\t\tcommit('ADD_ACCOUNT', account)\r\n\t\t\t\tdispatch('storeWallets')\r\n\t\t\t} else {\r\n\t\t\t\tthrow 'Account already in store.'\r\n\t\t\t}\r\n\t\t},\r\n\t\tstoreWallets({ commit, state }) {\r\n\t\t\twindow.localStorage.setItem('wallets', JSON.stringify(state.wallets))\r\n\t\t\tcommit('SET_BACKUP_STATE', false)\r\n\t\t},\r\n\t\tasync signInWithPrivateKey(\r\n\t\t\t{ commit, rootGetters, dispatch },\r\n\t\t\t{ prefix = 'cosmos', privKey }\r\n\t\t) {\r\n\t\t\tconst pKey = keyFromWif(privKey.trim())\r\n\t\t\tconst accountSigner = await DirectSecp256k1Wallet.fromKey(pKey, prefix)\r\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\r\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync restoreWallet(\r\n\t\t\t{ commit, dispatch, rootGetters, state },\r\n\t\t\t{ encrypted, password }\r\n\t\t) {\r\n\t\t\tconst wallet = JSON.parse(\r\n\t\t\t\tCryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8)\r\n\t\t\t)\r\n\t\t\tlet newName = wallet.name\r\n\t\t\tlet incr = 1\r\n\t\t\twhile (state.wallets.findIndex((x) => x.name == newName) != -1) {\r\n\t\t\t\tnewName = wallet.name + '_' + incr\r\n\t\t\t\tincr++\r\n\t\t\t}\r\n\t\t\twallet.name = newName\r\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\t\twallet.mnemonic,\r\n\t\t\t\tstringToPath(wallet.HDpath + '0'),\r\n\t\t\t\twallet.prefix\r\n\t\t\t)\r\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\r\n\t\t\tcommit('ADD_WALLET', wallet)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\r\n\r\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\r\n\t\t\tdispatch('storeWallets')\r\n\t\t},\r\n\t\tasync createWalletWithMnemonic(\r\n\t\t\t{ commit, dispatch, rootGetters },\r\n\t\t\t{\r\n\t\t\t\tname = null,\r\n\t\t\t\tmnemonic,\r\n\t\t\t\tHDpath = \"m/44'/118'/0'/0/\",\r\n\t\t\t\tprefix = 'cosmos',\r\n\t\t\t\tpassword = null\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tconst wallet = {\r\n\t\t\t\tname,\r\n\t\t\t\tmnemonic,\r\n\t\t\t\tHDpath,\r\n\t\t\t\tpassword,\r\n\t\t\t\tprefix,\r\n\t\t\t\tpathIncrement: 0,\r\n\t\t\t\taccounts: []\r\n\t\t\t}\r\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\r\n\t\t\t\tmnemonic,\r\n\t\t\t\tstringToPath(HDpath + '0'),\r\n\t\t\t\tprefix\r\n\t\t\t)\r\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\r\n\t\t\tconst account = { address: firstAccount.address, pathIncrement: 0 }\r\n\t\t\twallet.accounts.push(account)\r\n\t\t\tcommit('ADD_WALLET', wallet)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\r\n\r\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\r\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\r\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t}\r\n\t\t\tdispatch('storeWallets')\r\n\t\t},\r\n\t\tasync sendTransaction({ state }, { message, memo, denom }) {\r\n\t\t\tconst fee = {\r\n\t\t\t\tamount: [{ amount: '0', denom }],\r\n\t\t\t\tgas: '200000'\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log({\r\n\t\t\t\t\tadd: state.selectedAddress,\r\n\t\t\t\t\tmsg: [message],\r\n\t\t\t\t\tfee,\r\n\t\t\t\t\tmemo\r\n\t\t\t\t})\r\n\t\t\t\tconst result = await state.activeClient.signAndBroadcast(\r\n\t\t\t\t\tstate.selectedAddress,\r\n\t\t\t\t\t[message],\r\n\t\t\t\t\tfee,\r\n\t\t\t\t\tmemo\r\n\t\t\t\t)\r\n\t\t\t\tassertIsBroadcastTxSuccess(result)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e)\r\n\t\t\t\tthrow 'Failed to broadcast transaction.' + e\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"file":"wallet.js"}