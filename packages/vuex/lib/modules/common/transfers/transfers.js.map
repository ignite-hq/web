{"version":3,"sources":["../../../../src/modules/common/transfers/transfers.js"],"names":["getDefaultState","GetTxsEvent","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","Object","assign","QUERY","query","key","value","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","getters","getGetTxsEvent","params","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","ServiceGetTxsEvent","subscribe","all","values","axios","get","event","data","error","SpVuexError"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport  SpVuexError  from '../../../errors/SpVuexError';\n\nconst getDefaultState = () => {\n    return {\n        GetTxsEvent: {},\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getGetTxsEvent: (state) => (params = {}) => {\n            return state.GetTxsEvent[JSON.stringify(params)] ?? {}\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async ServiceGetTxsEvent({ commit, rootGetters }, { subscribe = false, all=true,  ...key }) {\n            try {\n                let params=Object.values(key)\n                let value = (await axios.get(rootGetters['common/env/apiCosmos'] + '/cosmos/tx/v1beta1/txs?events='+key.event)).data;                \n                /*\n                while (all && value.pagination && value.pagination.next_key!=null) {\n                    let next_values=(await (await initQueryClient(rootGetters)).queryPostAll.apply(null,[...params, {'pagination.key':value.pagination.next_key}] )).data;\n                    \n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop]=[...value[prop], ...next_values[prop]]\n                        }else{\n                            value[prop]=next_values[prop]\n                        }\n                    }\n                    console.log(value)\n                }\n                */\n                commit('QUERY', { query: 'GetTxsEvent', key, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'ServiceGetTxsEvent', payload: key });\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:ServiceGetTxsEvent', 'API Node Unavailable. Could not perform query.'));\n            }\n        },\n    }\n};\n"],"file":"transfers.js"}